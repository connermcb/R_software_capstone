time <- paste(Hour, Mins, Secs, sep=":")
time
as.Date(as.character(paste(date, time), format="Y%m%d H%M%S"))
as.Date(paste(date, time))
as.Date(as.character(paste(date, time), format="Y%m%d H%M%S"))
as.character.POSIXt(as.character(paste(date, time), format="Y%m%d H%M%S"))
z <- as.character.POSIXt(as.character(paste(date, time), format="Y%m%d H%M%S"))
class(z)
z <- as.POSIXt(as.character(paste(date, time), format="Y%m%d H%M%S"))
as.Date.POSIXct(as.character(paste(date, time), format="Y%m%d H%M%S"))
as.Date.POSIXct((paste(date, time), format="Y%m%d H%M%S")
as.Date.POSIXct(paste(date, time))
as_date(as.character(paste(date, time), format="Y%m%d H%M%S"))
as_datetime(as.character(paste(date, time), format="Y%m%d H%M%S"))
?as_datetime
as_datetime(as.character(paste(date, time), format="Y%m%d H%M%S"), tz=FALSE)
as_datetime(as.character(paste(date, time), format="Y%m%d H%M%S"), tz=NA)
as_datetime(as.character(paste(date, time), format="Y%m%d H%M%S"), tz=NULL)
mutate(Date = paste(Year, Month,DayofMonth, sep="/"),
Date_Time = as_datetime(as.character(
paste(Date, paste(DepTime%/%100, DepTime%%100, "00", sep=":")),
format="Y%m%d H%M%S"),
tz=NULL))
flights <- flights%>%
mutate(Date = paste(Year, Month,DayofMonth, sep="/"),
Date_Time = as_datetime(as.character(
paste(Date, paste(DepTime%/%100, DepTime%%100, "00", sep=":")),
format="Y%m%d H%M%S"),
tz=NULL))
flights
as_datetime(as.character(paste(date,
paste(DepTime%/%100,
DepTime%%100,
"00", sep=":")),
format="Y%m%d H%M%S"), tz=NULL)
flights <- flights%>%
mutate(Date = paste(Year, Month,DayofMonth, sep="/"),
Date_Time = as_datetime(as.character(paste(Date,
paste(DepTime%/%100,
DepTime%%100,
"00", sep=":")),
format="Y%m%d H%M%S"), tz='UTC'))
flights
flights <- flights%>%
mutate(Date = paste(Year, Month,DayofMonth, sep="/"))
flights <- flights%>%
mutate(date = paste(Year, Month,DayofMonth, sep="/"),
date_time = paste(date, paste(DepTime%/%100,
DepTime%%100,
0, sep=":"))
)
flights
flights <- flights%>%
mutate(date = paste(Year, Month,DayofMonth, sep="/"),
date_time = paste(date, paste(DepTime%/%100,
DepTime%%100,
00, sep=":"))
)
flights
flights <- flights%>%
mutate(date = paste(Year, Month,DayofMonth, sep="/"),
date_time = paste(date, paste(DepTime%/%100,
DepTime%%100,
"00", sep=":"))
)
str(flights)
flights["Date_Time"] <- sapply(flights, function(x)){
flights["Date_Time"] <- sapply(flights, function(x){
Date_Time = as_datetime(as.character(paste(Date,
paste(DepTime%/%100,
DepTime%%100,
"00", sep=":")),
format="Y%m%d H%M%S"), tz='UTC')
})
str(flights)
library(data.table)
library(dplyr)
library(GGally)
library(ggmap)
library(ggplot2)
library(grid)
library(gridExtra)
library(gtable)
library(lubridate)
library(mapdata)
library(maps)
library(pscl)
library(psych)
library(RColorBrewer)
library(rvest)
library(statsr)
library(tidyr)
load("flights.rda")
flights$DepDelay[is.na(flights$DepDelay)] = 0
load("flights.rda")
flights$DepDelay[is.na(flights$DepDelay)] = 0
flights <- flights[flights$DepDelay>=-15 & flights$DepDelay<=480, ]
flights["Delay"] <- ifelse(flights$DepDelay>15, 1, 0)
cum_days_revised <- cumsum(c(0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30))
# recalculate variable
flights$DayofYear <- cum_days_revised[flights$Month] + flights$DayofMonth
```{r, warning=FALSE}
carriers_index <- read.csv('carriers.csv', header=FALSE)
colnames(carriers_index) <- c('UniqueCarrier', 'CarrierName')
included_carriers <- as.vector(unique(flights$UniqueCarrier))
carriers_index <- subset(carriers_index, UniqueCarrier %in% included_carriers)
# manually set CarrierName to abbreviated format
carriers_index['CarrierName'] <- c('Pinnacle', 'American', 'Aloha', 'Alaska',
'JetBlue', 'Continental', 'Delta',
'Atlantic SW', 'Frontier', 'AirTran',
'Hawaiian', 'Amer Eagle', 'Northwest',
'Comair', 'Skywest', 'United', 'US Airways',
'Southwest', 'ExpressJet', 'Mesa')
# add column with full carrier name to data frame
flights <- merge(flights, carriers_index)
flights <- flights[flights$CarrierName!="Aloha" &
flights$CarrierName!="Hawaiian",]
# get list of 3-character airport codes from 'flights'
airport_codes_origin <- unique(flights$Origin)
airport_codes_dest <-  unique(flights$Dest)
# load airport data file, very large file of nearly all airports in world
airports <- read.csv('airport-codes.csv')
# subset 'airports' to only those within contiguous United States
airports <- subset(airports, iso_country=='US' &
!(iso_region %in% c('US-AK', 'US-HI')))
# subset 'airports' for airports included in 'flights' - Origin
origin_airports <- subset(airports, local_code %in% airport_codes_origin)
#split 'coordinates' variable into latitude and longitude for plotting - Origin
origin_airports <- separate(origin_airports, coordinates, into=c('origin_lat','origin_long'),
sep=', ', convert = TRUE)
# select pertinant variables - Origin
origin_airports <- origin_airports[,c('type', 'name', 'origin_lat', 'origin_long',
'elevation_ft', 'iata_code')]
# join aiport data to flights data set - Origin
names(origin_airports) <- c('origin_type', 'origin_name', 'origin_lat',
'origin_long', 'origin_elev', 'Origin')
flights <- merge(flights, origin_airports, by="Origin")
# subset 'airports' for airports included in 'flights' - Destination
dest_airports <- subset(airports, local_code %in% airport_codes_dest)
#split 'coordinates' variable into latitude and longitude for plotting - Destination
dest_airports <- separate(dest_airports, coordinates, into=c('dest_lat','dest_long'),
sep=', ', convert = TRUE)
# select pertinant variables - Destination
dest_airports <- dest_airports[,c('type', 'name', 'dest_lat', 'dest_long',
'elevation_ft', 'iata_code')]
# join aiport data to flights data set - Origin
names(dest_airports) <- c('dest_type', 'dest_name', 'dest_lat',
'dest_long', 'dest_elev', 'Dest')
flights <- merge(flights, dest_airports, by="Dest")
head(flights)
flights <- flights[flights$origin_name!="seattle airport",]
flights <- flights%>%
mutate(date = paste(Year, Month,DayofMonth, sep="/"),
date_time = paste(date, paste(DepTime%/%100,
DepTime%%100,
"00", sep=":"))
)
flights
flights["Date_Time"] <- sapply(flights, function(x){
Date_Time = as_datetime(as.character(paste(date,
paste(DepTime%/%100,
DepTime%%100,
"00", sep=":")),
format="Y%m%d H%M%S"), tz='UTC')
})
flights["Date_Time"] <- sapply(flights, function(x){
Date_Time = as_datetime(as.character(paste(date,
paste(flights$DepTime%/%100,
flights$DepTime%%100,
"00", sep=":")),
format="Y%m%d H%M%S"), tz='UTC')
})
flights["Date_Time"] <- c(rep(NA, nrow(flights)))
head(flights)
for(ii in nrow(flights)){
temp <- flights[ii, "date_time"]
flights[ii, "Date_Time"] <- as_datetime(temp, tz=UTC)
}
for(ii in nrow(flights)){
temp <- flights[ii, "date_time"]
flights[ii, "Date_Time"] <- as_datetime(temp, tz="UTC")
}
flights
for(ii in nrow(flights)){
temp <- flights[ii, "date_time"]
flights[ii, "Date_Time"] <<- as_datetime(temp, tz="UTC")
}
flights
flights[ii, "Date_Time"] <<- as_datetime(temp, tz="UTC")
for(ii in nrow(flights)){
temp <- flights[ii, "date_time"]
flights[ii, "Date_Time"] <<- as_datetime(temp, tz="UTC")
}
sapply(flights$date_time, function(x) as_date(x, tz="UTC"))
flights["date_time"] <- sapply(flights$date_time, function(x) as_date(x, tz="UTC"))
M <- matrix(seq(1,16), 4, 4)
M
apply(M, 1, min)
apply(M, 2, min)
apply(M, 1, max)
flights
flights <- flights%>%
mutate(date = paste(Year, Month,DayofMonth, sep="/"),
date_time = paste(date, paste(DepTime%/%100,
DepTime%%100,
"00", sep=":"))
)
flights["date_time"] <- lapply(flights$date_time, function(x) as_date(x, tz="UTC"))
a
library(data.table)
library(dplyr)
library(GGally)
library(ggmap)
library(ggplot2)
library(grid)
library(gridExtra)
library(gtable)
library(lubridate)
library(mapdata)
library(maps)
library(pscl)
library(psych)
library(RColorBrewer)
library(rvest)
library(statsr)
library(tidyr)
load("flights.rda")
flights$DepDelay[is.na(flights$DepDelay)] = 0
flights <- flights[flights$DepDelay>=-15 & flights$DepDelay<=480, ]
flights["Delay"] <- ifelse(flights$DepDelay>15, 1, 0)
cum_days_revised <- cumsum(c(0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30))
# recalculate variable
flights$DayofYear <- cum_days_revised[flights$Month] + flights$DayofMonth
carriers_index <- read.csv('carriers.csv', header=FALSE)
colnames(carriers_index) <- c('UniqueCarrier', 'CarrierName')
included_carriers <- as.vector(unique(flights$UniqueCarrier))
carriers_index <- subset(carriers_index, UniqueCarrier %in% included_carriers)
# manually set CarrierName to abbreviated format
carriers_index['CarrierName'] <- c('Pinnacle', 'American', 'Aloha', 'Alaska',
'JetBlue', 'Continental', 'Delta',
'Atlantic SW', 'Frontier', 'AirTran',
'Hawaiian', 'Amer Eagle', 'Northwest',
'Comair', 'Skywest', 'United', 'US Airways',
'Southwest', 'ExpressJet', 'Mesa')
# add column with full carrier name to data frame
flights <- merge(flights, carriers_index)
flights <- flights[flights$CarrierName!="Aloha" &
flights$CarrierName!="Hawaiian",]
# get list of 3-character airport codes from 'flights'
airport_codes_origin <- unique(flights$Origin)
airport_codes_dest <-  unique(flights$Dest)
# load airport data file, very large file of nearly all airports in world
airports <- read.csv('airport-codes.csv')
# subset 'airports' to only those within contiguous United States
airports <- subset(airports, iso_country=='US' &
!(iso_region %in% c('US-AK', 'US-HI')))
# subset 'airports' for airports included in 'flights' - Origin
origin_airports <- subset(airports, local_code %in% airport_codes_origin)
#split 'coordinates' variable into latitude and longitude for plotting - Origin
origin_airports <- separate(origin_airports, coordinates, into=c('origin_lat','origin_long'),
sep=', ', convert = TRUE)
# select pertinant variables - Origin
origin_airports <- origin_airports[,c('type', 'name', 'origin_lat', 'origin_long',
'elevation_ft', 'iata_code')]
# join aiport data to flights data set - Origin
names(origin_airports) <- c('origin_type', 'origin_name', 'origin_lat',
'origin_long', 'origin_elev', 'Origin')
flights <- merge(flights, origin_airports, by="Origin")
# subset 'airports' for airports included in 'flights' - Destination
dest_airports <- subset(airports, local_code %in% airport_codes_dest)
#split 'coordinates' variable into latitude and longitude for plotting - Destination
dest_airports <- separate(dest_airports, coordinates, into=c('dest_lat','dest_long'),
sep=', ', convert = TRUE)
# select pertinant variables - Destination
dest_airports <- dest_airports[,c('type', 'name', 'dest_lat', 'dest_long',
'elevation_ft', 'iata_code')]
# join aiport data to flights data set - Origin
names(dest_airports) <- c('dest_type', 'dest_name', 'dest_lat',
'dest_long', 'dest_elev', 'Dest')
flights <- merge(flights, dest_airports, by="Dest")
head(flights)
flights <- flights[flights$origin_name!="seattle airport",]
flights <- flights%>%
mutate(date = paste(Year, Month,DayofMonth, sep="/"),
date_time = paste(date, paste(DepTime%/%100,
DepTime%%100,
"00", sep=":"))
)
flights
as_date('2008/10/16 11:55:00', tz="UTC")
as_date('2008/10/16 11:55:00', format="Y%m%d H%M%S", tz="UTC")
as_date(as.character('2008/10/16 11:55:00', format="Y%m%d H%M%S"), tz="UTC")
as_datetime(as.character('2008/10/16 11:55:00', format="Y%m%d H%M%S"), tz="UTC")
as_datetime('2008/10/16 11:55:00', tz="UTC")
flights["Date_Time"] <- lapply(flights$date_time, function(x) as_datetime(x, tz="UTC"))
install.packages("ggplot2")
choose(8,7) * .5^7*.5^1
choose(8,7) * .5^7*.5^1 + choose(8,8)*.5^8
pbinom(6, size=8, prob=0.5, lower.tail = FALSE)
140/50
?pnorm
qnorm(.75, mean=1020, sd=50)
t <- factorial(500)/(2*factorial(498))
t
factorial(100)
factorial(200)
factorial(150)
pnorm(.70, mean=80, sd=10, lower.tail = TRUE)
pnorm(.70, mean=80, sd=10, lower.tail = FALSE)
qnorm(.70, mean=80, sd=10, lower.tail = TRUE)
pnorm(70, mean=80, sd=10, lower.tail = TRUE)
qnorm(.95, mean=1100, sd=10)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=7.5)
choose(5,4)*.5^4*(.5^1) + choose(5,5)*.5^5
pbinom(3, size=5, prob=.5, lower.tail = FALSE)
ppois(10, lambda = 5*3)
## Load libraries
library(readr)
getwd()
setwd("../../conner/adv_programming_R/R_software_capstone")
## Read in data
quakes <- read_delim("signif_earthquakes.txt", delim = "\t")
names(quakes)
library(dplyr)
library(lubridate)
library(readr)
library(tidyr)
names(quakes)
str(quakes)
year <- -2000
month <- NA
day <- NA
date <- ymd(year, month, day)
date
class(date)
summary(quakes(year))
summary(quakes$YEAR)
sum(is.na(quakes$YEAR))
sum(is.na(quakes$MONTH))
sum(is.na(quakes$DAY))
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=replace(MONTH, MONTH==NA, 1),
DAY=replace(DAY, DAY==NA, 1))
sum(is.na(quakes$DAY))
sum(is.na(quakes$MONTH))
names(quakes)
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=replace(MONTH, MONTH==NA, 1),
DAY=replace(DAY, DAY==NA, 1))
sum(is.na(quakes$MONTH))
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=replace(MONTH==NA, 1),
DAY=replace(DAY==NA, 1))
?replace
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=replace(MONTH, is.na(MONTH), 1),
DAY=replace(DAY, is.na(DAY), 1))
sum(is.na(replace(quakes$MONTH, MONT)))
sum(is.na(quakes$MONTH))
## Read in data
quakes <- read_delim("signif_earthquakes.txt", delim = "\t")
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=replace(MONTH, is.na(MONTH), 1),
DAY=replace(DAY, is.na(DAY), 1))
## Read in data
quakes <- read_delim("signif_earthquakes.txt", delim = "\t")
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=as.character(replace(MONTH, is.na(MONTH), 1)),
DAY=as.character(replace(DAY, is.na(DAY), 1))
YEAR=as.character(YEAR)
)
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=as.character(replace(MONTH, is.na(MONTH), 1)),
DAY=as.character(replace(DAY, is.na(DAY), 1),
YEAR=as.character(YEAR))
)
str(quakes)
## Read in data
quakes <- read_delim("signif_earthquakes.txt", delim = "\t")
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=as.character(replace(MONTH, is.na(MONTH), 1)),
DAY=as.character(replace(DAY, is.na(DAY), 1),
YEAR=as.character(YEAR))
)
str(quakes)
## Read in data
quakes <- read_delim("signif_earthquakes.txt", delim = "\t")
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=as.character(replace(MONTH, is.na(MONTH), 1)),
DAY=as.character(replace(DAY, is.na(DAY), 1))
)
# YEAR to character class
quakes$YEAR <- as.character(quakes$YEAR)
str(quakes)
paste(1,2,3)
## Read in data
quakes <- read_delim("signif_earthquakes.txt", delim = "\t")
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=replace(MONTH, is.na(MONTH), 1),
DAY=replace(DAY, is.na(DAY), 1)
)
# combine timestamp data into single Date class variable
quakes$date_time <- with(quakes, as.Date(paste(YEAR, MONTH, DAY, sep="-"),
format="%Y-%m-%d")
)
names(quakes)
head(quakes$date_time, 5)
summary(quakes$date_time)
sum(quakes$YEAR<0)
head(quakes$LOCATION_NAME, 5)
library(stringr)
gsub("^.*:  ", "", "JORDAN:  BAB-A-DARAA,AL-KARAK")
strsplit("JORDAN:  BAB-A-DARAA,AL-KARAK", ":  ")
?separate
head(quakes$COUNTRY)
LONGITUDE
# converst LONGITUDE, LATITUDE to numeric
class(quakes$LONGITUDE)
table(quakes$YEAR)
## Read in data
quakes <- read_delim("signif_earthquakes.txt", delim = "\t")
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=replace(MONTH, is.na(MONTH), 1),
DAY=replace(DAY, is.na(DAY), 1)
)
# combine timestamp data into single Date class variable
quakes$date_time <- with(quakes, as.Date(paste(YEAR, MONTH, DAY, sep="-"),
format="%Y-%m-%d")
)
# clean location name variable
quakes$LOCATION_NAME <- gsub("^.*:  ", "", quakes$LOCATION_NAME)
# converst LONGITUDE, LATITUDE to numeric
quakes$LONGITUDE <- as.numeric(quakes$LONGITUDE)
quakes$LATITUDE <- as.numeric(quakes$LATITUDE)
as.Date("%Y-%m-%d", "3500-1-1")
as.Date(format="%Y-%m-%d", "3500-1-1")
as.Date(format="%Y-%m-%d", "-3500-1-1")
as.Date(format="%Y-%m-%d", "3500-1-1")
as.Date(format="%-Y-%m-%d", "3500-1-1")
as.Date(format="%-Y-%m-%d", "-3500-1-1")
as.Date(format="%Y-%m-%d", "3500-1-1")
quakes <- quakes[, -"date_time"]
quakes <- quakes[, -c(date_time)]
quakes <- quakes[-"date_time"]
names(quakes)
quakes <- quakes[, -48]
names(quakes)
# combine timestamp data into single Date class variable
quakes$dates_w_shift <- with(quakes, as.Date(paste(YEAR+2150, MONTH, DAY, sep="-"),
format="%Y-%m-%d")
)
sum(is.na(quakes$dates_w_shift))
quakes[is.na(quakes$dates_w_shift),]$YEAR
quakes[is.na(quakes$dates_w_shift), c("YEAR", "MONTH", "DAY")]
as.Date(paste(1960+2150, 2, 29, sep"-"), format="%Y-%m-%d")
as.Date(paste(1960+2150, 2, 29, sep="-"), format="%Y-%m-%d")
as.Date(paste(1960, 2, 29, sep="-"), format="%Y-%m-%d")
as.Date(paste(1960, 2, 29, sep="-"), format="%Y-%m-%d")
1960+2150
as.Date(paste(4110, 2, 29, sep="-"), format="%Y-%m-%d")
sort(quakes$YEAR, descending=TRUE)
sort(quakes$YEAR, decreasing = TRUE)
sort(quakes$YEAR)
head(sort(quakes$YEAR, decreasing = TRUE), 15)
as.Date(paste(2017+2150, 2, 29, sep="-"), format="%Y-%m-%d")
2150/4
2152/4
# combine timestamp data into single Date class variable
quakes$dates_w_shift <- with(quakes, as.Date(paste(YEAR+2152, MONTH, DAY, sep="-"),
format="%Y-%m-%d")
)
sum(is.na(quakes$dates_w_shift))
## Read in data
quakes <- read_delim("signif_earthquakes.txt", delim = "\t")
## Clean and format data
# MONTH NA's to 1 (January), DAY NA's to 1 (first day of month)
quakes <- quakes%>%
mutate(MONTH=replace(MONTH, is.na(MONTH), 1),
DAY=replace(DAY, is.na(DAY), 1)
)
# combine timestamp data into single Date class variable
quakes$dates_w_shift <- with(quakes, as.Date(paste(YEAR+2152, MONTH, DAY, sep="-"),
format="%Y-%m-%d")
)
# clean location name variable
quakes$LOCATION_NAME <- gsub("^.*:  ", "", quakes$LOCATION_NAME)
# converst LONGITUDE, LATITUDE to numeric
quakes$LONGITUDE <- as.numeric(quakes$LONGITUDE)
quakes$LATITUDE <- as.numeric(quakes$LATITUDE)
